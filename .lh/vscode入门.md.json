{
    "sourceFile": "vscode入门.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 65,
            "patches": [
                {
                    "date": 1653894494622,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1653895086861,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n - [编辑器单步运行]python 编辑器单步运行按`F8`,或者右键 👉 在终端中运行指定的行\r\n - [运行完整文件]运行整个文件,可以在终端直接输入 `python 文件名.py` 或右键👉在终端中运行python文件；当文件所在位置指定不明的时候，要填写绝对路径`python f:/vs_learn/demo2/test_2.py`\r\n - [运行完整文件]当不设置断点的时候直接`F5`进入调试也等于直接运行文件进行输出\r\n \r\n+# TODO:    \"terminal.integrated.defaultProfiles.windows\": \"C:\\\\Windows\\\\System32\\\\cmd.exe\",\r\n 【调用上一级目录文件】\r\n - `.\\` 代表上一级目录  `python .\\hello_word.py`\r\n - 步骤\r\n    ```\r\n"
                },
                {
                    "date": 1653895122081,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n - [编辑器单步运行]python 编辑器单步运行按`F8`,或者右键 👉 在终端中运行指定的行\r\n - [运行完整文件]运行整个文件,可以在终端直接输入 `python 文件名.py` 或右键👉在终端中运行python文件；当文件所在位置指定不明的时候，要填写绝对路径`python f:/vs_learn/demo2/test_2.py`\r\n - [运行完整文件]当不设置断点的时候直接`F5`进入调试也等于直接运行文件进行输出\r\n \r\n-# TODO:    \"terminal.integrated.defaultProfiles.windows\": \"C:\\\\Windows\\\\System32\\\\cmd.exe\",\r\n+# TODO:    JSON\"terminal.integrated.defaultProfiles.windows\": \"C:\\\\Windows\\\\System32\\\\cmd.exe\",\r\n 【调用上一级目录文件】\r\n - `.\\` 代表上一级目录  `python .\\hello_word.py`\r\n - 步骤\r\n    ```\r\n"
                },
                {
                    "date": 1653895129402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n - [编辑器单步运行]python 编辑器单步运行按`F8`,或者右键 👉 在终端中运行指定的行\r\n - [运行完整文件]运行整个文件,可以在终端直接输入 `python 文件名.py` 或右键👉在终端中运行python文件；当文件所在位置指定不明的时候，要填写绝对路径`python f:/vs_learn/demo2/test_2.py`\r\n - [运行完整文件]当不设置断点的时候直接`F5`进入调试也等于直接运行文件进行输出\r\n \r\n-# TODO:    JSON\"terminal.integrated.defaultProfiles.windows\": \"C:\\\\Windows\\\\System32\\\\cmd.exe\",\r\n+# TODO:    JSON检测错误，让把\"terminal.integrated.defaultProfiles.windows\": \"C:\\\\Windows\\\\System32\\\\cmd.exe\",\r\n 【调用上一级目录文件】\r\n - `.\\` 代表上一级目录  `python .\\hello_word.py`\r\n - 步骤\r\n    ```\r\n"
                },
                {
                    "date": 1653895136088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n - [编辑器单步运行]python 编辑器单步运行按`F8`,或者右键 👉 在终端中运行指定的行\r\n - [运行完整文件]运行整个文件,可以在终端直接输入 `python 文件名.py` 或右键👉在终端中运行python文件；当文件所在位置指定不明的时候，要填写绝对路径`python f:/vs_learn/demo2/test_2.py`\r\n - [运行完整文件]当不设置断点的时候直接`F5`进入调试也等于直接运行文件进行输出\r\n \r\n-# TODO:    JSON检测错误，让把\"terminal.integrated.defaultProfiles.windows\": \"C:\\\\Windows\\\\System32\\\\cmd.exe\",\r\n+# TODO:    JSON检测错误，让把`\"terminal.integrated.defaultProfiles.windows\": \"C:\\\\Windows\\\\System32\\\\cmd.exe\",`\"terminal.integrated.defaultProfiles.windows\": \"C:\\\\Windows\\\\System32\\\\cmd.exe\",\r\n 【调用上一级目录文件】\r\n - `.\\` 代表上一级目录  `python .\\hello_word.py`\r\n - 步骤\r\n    ```\r\n"
                },
                {
                    "date": 1653895147410,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n - [编辑器单步运行]python 编辑器单步运行按`F8`,或者右键 👉 在终端中运行指定的行\r\n - [运行完整文件]运行整个文件,可以在终端直接输入 `python 文件名.py` 或右键👉在终端中运行python文件；当文件所在位置指定不明的时候，要填写绝对路径`python f:/vs_learn/demo2/test_2.py`\r\n - [运行完整文件]当不设置断点的时候直接`F5`进入调试也等于直接运行文件进行输出\r\n \r\n-# TODO:    JSON检测错误，让把`\"terminal.integrated.defaultProfiles.windows\": \"C:\\\\Windows\\\\System32\\\\cmd.exe\",`\"terminal.integrated.defaultProfiles.windows\": \"C:\\\\Windows\\\\System32\\\\cmd.exe\",\r\n+# TODO:    JSON检测错误，让把`\"terminal.integrated.shell.windows\": \"C:\\\\Windows\\\\System32\\\\cmd.exe\",改成`\"terminal.integrated.defaultProfiles.windows\": \"C:\\\\Windows\\\\System32\\\\cmd.exe\",\r\n 【调用上一级目录文件】\r\n - `.\\` 代表上一级目录  `python .\\hello_word.py`\r\n - 步骤\r\n    ```\r\n"
                },
                {
                    "date": 1653895157053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n - [编辑器单步运行]python 编辑器单步运行按`F8`,或者右键 👉 在终端中运行指定的行\r\n - [运行完整文件]运行整个文件,可以在终端直接输入 `python 文件名.py` 或右键👉在终端中运行python文件；当文件所在位置指定不明的时候，要填写绝对路径`python f:/vs_learn/demo2/test_2.py`\r\n - [运行完整文件]当不设置断点的时候直接`F5`进入调试也等于直接运行文件进行输出\r\n \r\n-# TODO:    JSON检测错误，让把`\"terminal.integrated.shell.windows\": \"C:\\\\Windows\\\\System32\\\\cmd.exe\",改成`\"terminal.integrated.defaultProfiles.windows\": \"C:\\\\Windows\\\\System32\\\\cmd.exe\",\r\n+# TODO:    JSON检测错误，让把`\"terminal.integrated.shell.windows\": \"C:\\\\Windows\\\\System32\\\\cmd.exe\",改成`\"terminal.integrated.defaultProfiles.windows\": \"C:\\\\Windows\\\\System32\\\\cmd.exe\"；我简单记录一下\r\n 【调用上一级目录文件】\r\n - `.\\` 代表上一级目录  `python .\\hello_word.py`\r\n - 步骤\r\n    ```\r\n"
                },
                {
                    "date": 1653895165074,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n - [编辑器单步运行]python 编辑器单步运行按`F8`,或者右键 👉 在终端中运行指定的行\r\n - [运行完整文件]运行整个文件,可以在终端直接输入 `python 文件名.py` 或右键👉在终端中运行python文件；当文件所在位置指定不明的时候，要填写绝对路径`python f:/vs_learn/demo2/test_2.py`\r\n - [运行完整文件]当不设置断点的时候直接`F5`进入调试也等于直接运行文件进行输出\r\n \r\n-# TODO:    JSON检测错误，让把`\"terminal.integrated.shell.windows\": \"C:\\\\Windows\\\\System32\\\\cmd.exe\",改成`\"terminal.integrated.defaultProfiles.windows\": \"C:\\\\Windows\\\\System32\\\\cmd.exe\"；我简单记录一下\r\n+\r\n 【调用上一级目录文件】\r\n - `.\\` 代表上一级目录  `python .\\hello_word.py`\r\n - 步骤\r\n    ```\r\n"
                },
                {
                    "date": 1653895174342,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -204,4 +204,7 @@\n #TODO：回溯历史版本\r\n #TODO: 同步 vscode 设置（bilibili 视频）\r\n 【markdown学习文档】\r\n   - *[参考](https://docs.github.com/cn/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax)\r\n+\r\n+记录：\r\n+JSON检测错误，让把`\"terminal.integrated.shell.windows\": \"C:\\\\Windows\\\\System32\\\\cmd.exe\",改成`\"terminal.integrated.defaultProfiles.windows\": \"C:\\\\Windows\\\\System32\\\\cmd.exe\"；我简单记录一下\n\\ No newline at end of file\n"
                },
                {
                    "date": 1653895244046,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -206,5 +206,5 @@\n 【markdown学习文档】\r\n   - *[参考](https://docs.github.com/cn/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax)\r\n \r\n 记录：\r\n-JSON检测错误，让把`\"terminal.integrated.shell.windows\": \"C:\\\\Windows\\\\System32\\\\cmd.exe\",改成`\"terminal.integrated.defaultProfiles.windows\": \"C:\\\\Windows\\\\System32\\\\cmd.exe\"；我简单记录一下\n\\ No newline at end of file\n+1. JSON检测错误，让把`\"terminal.integrated.shell.windows\": \"C:\\\\Windows\\\\System32\\\\cmd.exe\",改成`\"terminal.integrated.defaultProfiles.windows\": \"C:\\\\Windows\\\\System32\\\\cmd.exe\"；我简单记录一下\n\\ No newline at end of file\n"
                },
                {
                    "date": 1653895300257,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -197,8 +197,9 @@\n             \"python\"\r\n         ],\r\n     ```\r\n     </details> </p>\r\n+    \r\n - local history\r\n \r\n \r\n #TODO：回溯历史版本\r\n"
                },
                {
                    "date": 1653895307927,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -197,12 +197,12 @@\n             \"python\"\r\n         ],\r\n     ```\r\n     </details> </p>\r\n-    \r\n+\r\n - local history\r\n+  - 把设置里的\r\n \r\n-\r\n #TODO：回溯历史版本\r\n #TODO: 同步 vscode 设置（bilibili 视频）\r\n 【markdown学习文档】\r\n   - *[参考](https://docs.github.com/cn/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax)\r\n"
                },
                {
                    "date": 1653895333219,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -199,9 +199,9 @@\n     ```\r\n     </details> </p>\r\n \r\n - local history\r\n-  - 把设置里的\r\n+  - 在设置里搜索save，把\r\n \r\n #TODO：回溯历史版本\r\n #TODO: 同步 vscode 设置（bilibili 视频）\r\n 【markdown学习文档】\r\n"
                },
                {
                    "date": 1653895356590,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -199,9 +199,9 @@\n     ```\r\n     </details> </p>\r\n \r\n - local history\r\n-  - 在设置里搜索save，把\r\n+  - 在设置里搜索save，把`File:Auto Save\r\n \r\n #TODO：回溯历史版本\r\n #TODO: 同步 vscode 设置（bilibili 视频）\r\n 【markdown学习文档】\r\n"
                },
                {
                    "date": 1653895367935,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -199,9 +199,9 @@\n     ```\r\n     </details> </p>\r\n \r\n - local history\r\n-  - 在设置里搜索save，把`File:Auto Save\r\n+  - 在设置里搜索save，把`File:Auto Save`改为\r\n \r\n #TODO：回溯历史版本\r\n #TODO: 同步 vscode 设置（bilibili 视频）\r\n 【markdown学习文档】\r\n"
                },
                {
                    "date": 1653895378297,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -199,9 +199,9 @@\n     ```\r\n     </details> </p>\r\n \r\n - local history\r\n-  - 在设置里搜索save，把`File:Auto Save`改为\r\n+  - 在设置里搜索save，把`File:Auto Save`改为`afterDelay`\r\n \r\n #TODO：回溯历史版本\r\n #TODO: 同步 vscode 设置（bilibili 视频）\r\n 【markdown学习文档】\r\n"
                },
                {
                    "date": 1653895397964,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -200,8 +200,9 @@\n     </details> </p>\r\n \r\n - local history\r\n   - 在设置里搜索save，把`File:Auto Save`改为`afterDelay`\r\n+  - \"code-runner.saveFileBeforeRun\": true\r\n \r\n #TODO：回溯历史版本\r\n #TODO: 同步 vscode 设置（bilibili 视频）\r\n 【markdown学习文档】\r\n"
                },
                {
                    "date": 1653895406858,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -200,9 +200,9 @@\n     </details> </p>\r\n \r\n - local history\r\n   - 在设置里搜索save，把`File:Auto Save`改为`afterDelay`\r\n-  - \"code-runner.saveFileBeforeRun\": true\r\n+  - \"code-runner.save FileBeforeRun\": true\r\n \r\n #TODO：回溯历史版本\r\n #TODO: 同步 vscode 设置（bilibili 视频）\r\n 【markdown学习文档】\r\n"
                },
                {
                    "date": 1653895414376,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -200,9 +200,9 @@\n     </details> </p>\r\n \r\n - local history\r\n   - 在设置里搜索save，把`File:Auto Save`改为`afterDelay`\r\n-  - \"code-runner.save FileBeforeRun\": true\r\n+  - \"code-runner.save File Before Run\": true\r\n \r\n #TODO：回溯历史版本\r\n #TODO: 同步 vscode 设置（bilibili 视频）\r\n 【markdown学习文档】\r\n"
                },
                {
                    "date": 1653895423936,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -200,9 +200,9 @@\n     </details> </p>\r\n \r\n - local history\r\n   - 在设置里搜索save，把`File:Auto Save`改为`afterDelay`\r\n-  - \"code-runner.save File Before Run\": true\r\n+  - `Code-runner.save File Before Run\": true\r\n \r\n #TODO：回溯历史版本\r\n #TODO: 同步 vscode 设置（bilibili 视频）\r\n 【markdown学习文档】\r\n"
                },
                {
                    "date": 1653895429703,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -200,9 +200,9 @@\n     </details> </p>\r\n \r\n - local history\r\n   - 在设置里搜索save，把`File:Auto Save`改为`afterDelay`\r\n-  - `Code-runner.save File Before Run\": true\r\n+  - `Code-runner:save File Before Run\": true\r\n \r\n #TODO：回溯历史版本\r\n #TODO: 同步 vscode 设置（bilibili 视频）\r\n 【markdown学习文档】\r\n"
                },
                {
                    "date": 1653895436139,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -200,9 +200,9 @@\n     </details> </p>\r\n \r\n - local history\r\n   - 在设置里搜索save，把`File:Auto Save`改为`afterDelay`\r\n-  - `Code-runner:save File Before Run\": true\r\n+  - `Code-runner:Save File Before Run\": true\r\n \r\n #TODO：回溯历史版本\r\n #TODO: 同步 vscode 设置（bilibili 视频）\r\n 【markdown学习文档】\r\n"
                },
                {
                    "date": 1653895447208,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -200,9 +200,9 @@\n     </details> </p>\r\n \r\n - local history\r\n   - 在设置里搜索save，把`File:Auto Save`改为`afterDelay`\r\n-  - `Code-runner:Save File Before Run\": true\r\n+  - `Code-runner:Save File Before Run`改为` true`\r\n \r\n #TODO：回溯历史版本\r\n #TODO: 同步 vscode 设置（bilibili 视频）\r\n 【markdown学习文档】\r\n"
                },
                {
                    "date": 1653895463902,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -201,8 +201,9 @@\n \r\n - local history\r\n   - 在设置里搜索save，把`File:Auto Save`改为`afterDelay`\r\n   - `Code-runner:Save File Before Run`改为` true`\r\n+  - Files: Auto Save Delay\r\n \r\n #TODO：回溯历史版本\r\n #TODO: 同步 vscode 设置（bilibili 视频）\r\n 【markdown学习文档】\r\n"
                },
                {
                    "date": 1653895473329,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -201,9 +201,9 @@\n \r\n - local history\r\n   - 在设置里搜索save，把`File:Auto Save`改为`afterDelay`\r\n   - `Code-runner:Save File Before Run`改为` true`\r\n-  - Files: Auto Save Delay\r\n+  - Files: Auto Save Delay 是可以改每次\r\n \r\n #TODO：回溯历史版本\r\n #TODO: 同步 vscode 设置（bilibili 视频）\r\n 【markdown学习文档】\r\n"
                },
                {
                    "date": 1653895478830,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -201,9 +201,9 @@\n \r\n - local history\r\n   - 在设置里搜索save，把`File:Auto Save`改为`afterDelay`\r\n   - `Code-runner:Save File Before Run`改为` true`\r\n-  - Files: Auto Save Delay 是可以改每次\r\n+  - Files: Auto Save Delay 是可以\r\n \r\n #TODO：回溯历史版本\r\n #TODO: 同步 vscode 设置（bilibili 视频）\r\n 【markdown学习文档】\r\n"
                },
                {
                    "date": 1653895491016,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -201,9 +201,9 @@\n \r\n - local history\r\n   - 在设置里搜索save，把`File:Auto Save`改为`afterDelay`\r\n   - `Code-runner:Save File Before Run`改为` true`\r\n-  - Files: Auto Save Delay 是可以\r\n+  - Files: Auto Save Delay 是更改自动保存的间隔时间\r\n \r\n #TODO：回溯历史版本\r\n #TODO: 同步 vscode 设置（bilibili 视频）\r\n 【markdown学习文档】\r\n"
                },
                {
                    "date": 1653895496384,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -199,9 +199,10 @@\n     ```\r\n     </details> </p>\r\n \r\n - local history\r\n-  - 在设置里搜索save，把`File:Auto Save`改为`afterDelay`\r\n+  - 在设置里搜索save\r\n+    把`File:Auto Save`改为`afterDelay`\r\n   - `Code-runner:Save File Before Run`改为` true`\r\n   - Files: Auto Save Delay 是更改自动保存的间隔时间\r\n \r\n #TODO：回溯历史版本\r\n"
                },
                {
                    "date": 1653895502380,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -200,11 +200,11 @@\n     </details> </p>\r\n \r\n - local history\r\n   - 在设置里搜索save\r\n-    把`File:Auto Save`改为`afterDelay`\r\n-  - `Code-runner:Save File Before Run`改为` true`\r\n-  - Files: Auto Save Delay 是更改自动保存的间隔时间\r\n+    - 把`File:Auto Save`改为`afterDelay`\r\n+    - `Code-runner:Save File Before Run`改为` true`\r\n+    - Files: Auto Save Delay 是更改自动保存的间隔时间\r\n \r\n #TODO：回溯历史版本\r\n #TODO: 同步 vscode 设置（bilibili 视频）\r\n 【markdown学习文档】\r\n"
                },
                {
                    "date": 1653895509124,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -202,9 +202,9 @@\n - local history\r\n   - 在设置里搜索save\r\n     - 把`File:Auto Save`改为`afterDelay`\r\n     - `Code-runner:Save File Before Run`改为` true`\r\n-    - Files: Auto Save Delay 是更改自动保存的间隔时间\r\n+    - `Files: Auto Save Delay` 是更改自动保存的间隔时间\r\n \r\n #TODO：回溯历史版本\r\n #TODO: 同步 vscode 设置（bilibili 视频）\r\n 【markdown学习文档】\r\n"
                },
                {
                    "date": 1653895564885,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -199,8 +199,9 @@\n     ```\r\n     </details> </p>\r\n \r\n - local history\r\n+  这个软件是\r\n   - 在设置里搜索save\r\n     - 把`File:Auto Save`改为`afterDelay`\r\n     - `Code-runner:Save File Before Run`改为` true`\r\n     - `Files: Auto Save Delay` 是更改自动保存的间隔时间\r\n"
                },
                {
                    "date": 1653895571568,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -199,9 +199,9 @@\n     ```\r\n     </details> </p>\r\n \r\n - local history\r\n-  这个软件是\r\n+  这个软件是保存\r\n   - 在设置里搜索save\r\n     - 把`File:Auto Save`改为`afterDelay`\r\n     - `Code-runner:Save File Before Run`改为` true`\r\n     - `Files: Auto Save Delay` 是更改自动保存的间隔时间\r\n"
                },
                {
                    "date": 1653895583202,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -199,9 +199,9 @@\n     ```\r\n     </details> </p>\r\n \r\n - local history\r\n-  这个软件是保存\r\n+  这个软件是保存更改的不同处，但需要自己\r\n   - 在设置里搜索save\r\n     - 把`File:Auto Save`改为`afterDelay`\r\n     - `Code-runner:Save File Before Run`改为` true`\r\n     - `Files: Auto Save Delay` 是更改自动保存的间隔时间\r\n"
                },
                {
                    "date": 1653895592324,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -199,9 +199,9 @@\n     ```\r\n     </details> </p>\r\n \r\n - local history\r\n-  这个软件是保存更改的不同处，但需要自己\r\n+  这个软件是保存更改的不同处，但需要自己“保存”了才能\r\n   - 在设置里搜索save\r\n     - 把`File:Auto Save`改为`afterDelay`\r\n     - `Code-runner:Save File Before Run`改为` true`\r\n     - `Files: Auto Save Delay` 是更改自动保存的间隔时间\r\n"
                },
                {
                    "date": 1653895610280,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -199,9 +199,10 @@\n     ```\r\n     </details> </p>\r\n \r\n - local history\r\n-  这个软件是保存更改的不同处，但需要自己“保存”了才能\r\n+  这个软件是保存更改的不同处，但需要自己“保存”了才能保存更改处\r\n+  所以配合使用vscode的自动保存\r\n   - 在设置里搜索save\r\n     - 把`File:Auto Save`改为`afterDelay`\r\n     - `Code-runner:Save File Before Run`改为` true`\r\n     - `Files: Auto Save Delay` 是更改自动保存的间隔时间\r\n"
                },
                {
                    "date": 1653895618451,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -200,9 +200,9 @@\n     </details> </p>\r\n \r\n - local history\r\n   这个软件是保存更改的不同处，但需要自己“保存”了才能保存更改处\r\n-  所以配合使用vscode的自动保存\r\n+  所以配合使用vscode的自动保存才能\r\n   - 在设置里搜索save\r\n     - 把`File:Auto Save`改为`afterDelay`\r\n     - `Code-runner:Save File Before Run`改为` true`\r\n     - `Files: Auto Save Delay` 是更改自动保存的间隔时间\r\n"
                },
                {
                    "date": 1653895631985,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -200,9 +200,9 @@\n     </details> </p>\r\n \r\n - local history\r\n   这个软件是保存更改的不同处，但需要自己“保存”了才能保存更改处\r\n-  所以配合使用vscode的自动保存才能\r\n+  所以配合使用vscode的自动保存才能无缝衔接保存更改处，自动保存设置如下\r\n   - 在设置里搜索save\r\n     - 把`File:Auto Save`改为`afterDelay`\r\n     - `Code-runner:Save File Before Run`改为` true`\r\n     - `Files: Auto Save Delay` 是更改自动保存的间隔时间\r\n"
                },
                {
                    "date": 1653895641836,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -199,9 +199,9 @@\n     ```\r\n     </details> </p>\r\n \r\n - local history\r\n-  这个软件是保存更改的不同处，但需要自己“保存”了才能保存更改处\r\n+  这个软件是保存更改的不同处，但需要自己“保存”了才能保存更改处（因只保存更改处，所以\r\n   所以配合使用vscode的自动保存才能无缝衔接保存更改处，自动保存设置如下\r\n   - 在设置里搜索save\r\n     - 把`File:Auto Save`改为`afterDelay`\r\n     - `Code-runner:Save File Before Run`改为` true`\r\n"
                },
                {
                    "date": 1653895647220,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -199,9 +199,9 @@\n     ```\r\n     </details> </p>\r\n \r\n - local history\r\n-  这个软件是保存更改的不同处，但需要自己“保存”了才能保存更改处（因只保存更改处，所以\r\n+  这个软件是保存更改的不同处，但需要自己“保存”了才能保存更改处（因只保存更改处，所以不会zhan\r\n   所以配合使用vscode的自动保存才能无缝衔接保存更改处，自动保存设置如下\r\n   - 在设置里搜索save\r\n     - 把`File:Auto Save`改为`afterDelay`\r\n     - `Code-runner:Save File Before Run`改为` true`\r\n"
                },
                {
                    "date": 1653895652384,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -199,9 +199,9 @@\n     ```\r\n     </details> </p>\r\n \r\n - local history\r\n-  这个软件是保存更改的不同处，但需要自己“保存”了才能保存更改处（因只保存更改处，所以不会zhan\r\n+  这个软件是保存更改的不同处，但需要自己“保存”了才能保存更改处（因只保存更改处，所以不会占用太大内存）\r\n   所以配合使用vscode的自动保存才能无缝衔接保存更改处，自动保存设置如下\r\n   - 在设置里搜索save\r\n     - 把`File:Auto Save`改为`afterDelay`\r\n     - `Code-runner:Save File Before Run`改为` true`\r\n"
                },
                {
                    "date": 1653895660076,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -204,9 +204,9 @@\n   所以配合使用vscode的自动保存才能无缝衔接保存更改处，自动保存设置如下\r\n   - 在设置里搜索save\r\n     - 把`File:Auto Save`改为`afterDelay`\r\n     - `Code-runner:Save File Before Run`改为` true`\r\n-    - `Files: Auto Save Delay` 是更改自动保存的间隔时间\r\n+    - `Files: Auto Save Delay` 是更改自动保存的间隔时间，可以设置的久一点，\r\n \r\n #TODO：回溯历史版本\r\n #TODO: 同步 vscode 设置（bilibili 视频）\r\n 【markdown学习文档】\r\n"
                },
                {
                    "date": 1653895666222,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -204,9 +204,9 @@\n   所以配合使用vscode的自动保存才能无缝衔接保存更改处，自动保存设置如下\r\n   - 在设置里搜索save\r\n     - 把`File:Auto Save`改为`afterDelay`\r\n     - `Code-runner:Save File Before Run`改为` true`\r\n-    - `Files: Auto Save Delay` 是更改自动保存的间隔时间，可以设置的久一点，\r\n+    - `Files: Auto Save Delay` 是更改自动保存的间隔时间，可以设置的久一点，减小拖垮时间\r\n \r\n #TODO：回溯历史版本\r\n #TODO: 同步 vscode 设置（bilibili 视频）\r\n 【markdown学习文档】\r\n"
                },
                {
                    "date": 1653895761727,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -204,9 +204,9 @@\n   所以配合使用vscode的自动保存才能无缝衔接保存更改处，自动保存设置如下\r\n   - 在设置里搜索save\r\n     - 把`File:Auto Save`改为`afterDelay`\r\n     - `Code-runner:Save File Before Run`改为` true`\r\n-    - `Files: Auto Save Delay` 是更改自动保存的间隔时间，可以设置的久一点，减小拖垮时间\r\n+    - `Files: Auto Save Delay` 是更改自动保存的间隔时间，可以设置的久一点，减小拖垮时间；我设置为10分钟自动保存一次\r\n \r\n #TODO：回溯历史版本\r\n #TODO: 同步 vscode 设置（bilibili 视频）\r\n 【markdown学习文档】\r\n"
                },
                {
                    "date": 1653895776849,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -206,9 +206,8 @@\n     - 把`File:Auto Save`改为`afterDelay`\r\n     - `Code-runner:Save File Before Run`改为` true`\r\n     - `Files: Auto Save Delay` 是更改自动保存的间隔时间，可以设置的久一点，减小拖垮时间；我设置为10分钟自动保存一次\r\n \r\n-#TODO：回溯历史版本\r\n #TODO: 同步 vscode 设置（bilibili 视频）\r\n 【markdown学习文档】\r\n   - *[参考](https://docs.github.com/cn/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax)\r\n \r\n"
                },
                {
                    "date": 1653896001464,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -211,5 +211,5 @@\n 【markdown学习文档】\r\n   - *[参考](https://docs.github.com/cn/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax)\r\n \r\n 记录：\r\n-1. JSON检测错误，让把`\"terminal.integrated.shell.windows\": \"C:\\\\Windows\\\\System32\\\\cmd.exe\",改成`\"terminal.integrated.defaultProfiles.windows\": \"C:\\\\Windows\\\\System32\\\\cmd.exe\"；我简单记录一下\n\\ No newline at end of file\n+1. JSON检测错误，让把`\"terminal.integrated.shell.windows\": \"C:\\\\Windows\\\\System32\\\\cmd.exe\",`改成`\"terminal.integrated.defaultProfiles.windows\": \"C:\\\\Windows\\\\System32\\\\cmd.exe\"；`我简单记录一下\n\\ No newline at end of file\n"
                },
                {
                    "date": 1653896161819,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,9 +68,9 @@\n 【vscode 每个项目安装虚拟环境设置】\r\n - 利用 anaconda 来设置，和平时用 anaconda 建立虚拟环境一样,此时是一整个环境，用conda管理环境包\r\n - 单独一个文件一个包，用pip管理环境包\r\n     - 环境要先安装两个包 `pip install virtualenv` `pip install virtualenvwrapper-win`\r\n-    - `python -m venv .venv`       .venv是虚拟环境名字\r\n+    - 建立虚拟环境，`python -m venv .venv`       .venv是虚拟环境名字\r\n     - 进入虚拟环境：把.venv的Script的activate.bat拉到cmd编辑框，前头显示出((.venv)即为进入到虚拟环境\r\n     - 在当前虚拟环境里下载包  `pip install pandas` 不能用conda，否则会直接安装到anaconda的base\r\n \r\n \r\n"
                },
                {
                    "date": 1653896630165,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,8 +70,9 @@\n - 单独一个文件一个包，用pip管理环境包\r\n     - 环境要先安装两个包 `pip install virtualenv` `pip install virtualenvwrapper-win`\r\n     - 建立虚拟环境，`python -m venv .venv`       .venv是虚拟环境名字\r\n     - 进入虚拟环境：把.venv的Script的activate.bat拉到cmd编辑框，前头显示出((.venv)即为进入到虚拟环境\r\n+     - 如果是把activate.bat拉到powershell编辑框会报错\r\n     - 在当前虚拟环境里下载包  `pip install pandas` 不能用conda，否则会直接安装到anaconda的base\r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1653896646787,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,9 +70,9 @@\n - 单独一个文件一个包，用pip管理环境包\r\n     - 环境要先安装两个包 `pip install virtualenv` `pip install virtualenvwrapper-win`\r\n     - 建立虚拟环境，`python -m venv .venv`       .venv是虚拟环境名字\r\n     - 进入虚拟环境：把.venv的Script的activate.bat拉到cmd编辑框，前头显示出((.venv)即为进入到虚拟环境\r\n-     - 如果是把activate.bat拉到powershell编辑框会报错\r\n+     - 如果是把activate.bat拉到powershell编辑框会报错，[参考](https://zhuanlan.zhihu.com/p/403713319)\r\n     - 在当前虚拟环境里下载包  `pip install pandas` 不能用conda，否则会直接安装到anaconda的base\r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1653896904206,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,12 @@\n     - 环境要先安装两个包 `pip install virtualenv` `pip install virtualenvwrapper-win`\r\n     - 建立虚拟环境，`python -m venv .venv`       .venv是虚拟环境名字\r\n     - 进入虚拟环境：把.venv的Script的activate.bat拉到cmd编辑框，前头显示出((.venv)即为进入到虚拟环境\r\n      - 如果是把activate.bat拉到powershell编辑框会报错，[参考](https://zhuanlan.zhihu.com/p/403713319)\r\n-    - 在当前虚拟环境里下载包  `pip install pandas` 不能用conda，否则会直接安装到anaconda的base\r\n+      1. 以管理员身份运行powershell\r\n+      2. 输入 `set-executionpolicy remotesigned` 然后 `y`\r\n+      (我已经设定好了可以直接使用)\r\n+    - 在当前虚拟环境里下载包  `pip install pandas` 不能用conda，否则会直接安装到anaconda的base；在cmd或者powershell都可以\r\n \r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1653897040806,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,8 +75,11 @@\n       1. 以管理员身份运行powershell\r\n       2. 输入 `set-executionpolicy remotesigned` 然后 `y`\r\n       (我已经设定好了可以直接使用)\r\n     - 在当前虚拟环境里下载包  `pip install pandas` 不能用conda，否则会直接安装到anaconda的base；在cmd或者powershell都可以\r\n+      - 下载包，设置防止超时报错+使用镜像\r\n+      `pip --default-timeout=100 install flask_script -i http://pypi.douban.com/simple/ --trusted-host pypi.douban.com`\r\n+      上面--default-timeout=100是防止那个timeout报错的，后面用的镜像源。\r\n \r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1653897605253,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,27 +66,28 @@\n   </details> </p>\r\n \r\n 【vscode 每个项目安装虚拟环境设置】\r\n - 利用 anaconda 来设置，和平时用 anaconda 建立虚拟环境一样,此时是一整个环境，用conda管理环境包\r\n+    - 【创建一个名字为 p350,版本为 python3.5.0的虚拟环境】`conda create --name p350 python=3.5.0`\r\n - 单独一个文件一个包，用pip管理环境包\r\n     - 环境要先安装两个包 `pip install virtualenv` `pip install virtualenvwrapper-win`\r\n     - 建立虚拟环境，`python -m venv .venv`       .venv是虚拟环境名字\r\n-    - 进入虚拟环境：把.venv的Script的activate.bat拉到cmd编辑框，前头显示出((.venv)即为进入到虚拟环境\r\n+    - 进入虚拟环境：把.venv的Script的activate.bat拉到cmd编辑框，前头显示出(.venv)即为进入到虚拟环境\r\n      - 如果是把activate.bat拉到powershell编辑框会报错，[参考](https://zhuanlan.zhihu.com/p/403713319)\r\n       1. 以管理员身份运行powershell\r\n       2. 输入 `set-executionpolicy remotesigned` 然后 `y`\r\n       (我已经设定好了可以直接使用)\r\n     - 在当前虚拟环境里下载包  `pip install pandas` 不能用conda，否则会直接安装到anaconda的base；在cmd或者powershell都可以\r\n       - 下载包，设置防止超时报错+使用镜像\r\n       `pip --default-timeout=100 install flask_script -i http://pypi.douban.com/simple/ --trusted-host pypi.douban.com`\r\n       上面--default-timeout=100是防止那个timeout报错的，后面用的镜像源。\r\n+- 两种方法的区别是：①anaconda利用conda管理包，选择解释器的时候选择新建的环境即可，而后者利用pip管理包，在选择解释器时选择当前建立的虚拟环境后要把activate.bat拉入终端，进入虚拟环境以后前面会有(.venv)显示，前者没有；\r\n \r\n \r\n \r\n \r\n \r\n \r\n-\r\n 【使用 jupyter】\r\n - 建立.ipynb 文件\r\n - 打开右侧有个[选择内核]\r\n - 选择好后每个框框左侧有个三角形，点击运行即可\r\n@@ -210,9 +211,9 @@\n   这个软件是保存更改的不同处，但需要自己“保存”了才能保存更改处（因只保存更改处，所以不会占用太大内存）\r\n   所以配合使用vscode的自动保存才能无缝衔接保存更改处，自动保存设置如下\r\n   - 在设置里搜索save\r\n     - 把`File:Auto Save`改为`afterDelay`\r\n-    - `Code-runner:Save File Before Run`改为` true`\r\n+    - `Code-runner:Save File Before Run`改为 `true`\r\n     - `Files: Auto Save Delay` 是更改自动保存的间隔时间，可以设置的久一点，减小拖垮时间；我设置为10分钟自动保存一次\r\n \r\n #TODO: 同步 vscode 设置（bilibili 视频）\r\n 【markdown学习文档】\r\n"
                },
                {
                    "date": 1653897647575,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,37 +35,10 @@\n - `F9`设置断点\r\n - `F10`单步运行\r\n - `F11`进入函数来调试\r\n \r\n-【自动化排版】\r\n-- black 库 pip install black\r\n-- 命令行中使用：black 文件名.py\r\n-- 自动集成排版：设置 👉 搜 format on save👉 ✔\r\n-  👉 搜 python format provider👉 选 black\r\n-  【自动化排版不排版 markdown】#todo\r\n-- 设置中加入局部过滤：\r\n-    <details><summary>代码段</summary>\r\n-    <p>\r\n \r\n-    ```\r\n-    \"[markdown]\": {\r\n-        \"editor.wordWrap\": \"on\",\r\n-        \"editor.quickSuggestions\": false,\r\n-        \"editor.formatOnSave\": false\r\n-      },\r\n-    ```\r\n-    </details> </p>\r\n \r\n-【python 设置代码自动补充冒号和()】\r\n-  <details><summary>代码段</summary>\r\n-  <p>\r\n-  \r\n-  ```\r\n-  \"python.analysis.completeFunctionParens\": true,\r\n-  \"python.autoComplete.addBrackets\": true,\r\n-  ```\r\n-  </details> </p>\r\n-\r\n 【vscode 每个项目安装虚拟环境设置】\r\n - 利用 anaconda 来设置，和平时用 anaconda 建立虚拟环境一样,此时是一整个环境，用conda管理环境包\r\n     - 【创建一个名字为 p350,版本为 python3.5.0的虚拟环境】`conda create --name p350 python=3.5.0`\r\n - 单独一个文件一个包，用pip管理环境包\r\n@@ -96,8 +69,38 @@\n - `Ctrl+,`快捷打开\r\n - 用户设置是全局；当前工作空间是局部\r\n - 如果用户和工作空间设置了同样的项目，局部的会覆盖全局的设置\r\n \r\n+\r\n+【自动化排版】\r\n+- black 库 pip install black\r\n+- 命令行中使用：black 文件名.py\r\n+- 自动集成排版：设置 👉 搜 format on save👉 ✔\r\n+  👉 搜 python format provider👉 选 black\r\n+  【自动化排版不排版 markdown】#todo\r\n+- 设置中加入局部过滤：\r\n+    <details><summary>代码段</summary>\r\n+    <p>\r\n+\r\n+    ```\r\n+    \"[markdown]\": {\r\n+        \"editor.wordWrap\": \"on\",\r\n+        \"editor.quickSuggestions\": false,\r\n+        \"editor.formatOnSave\": false\r\n+      },\r\n+    ```\r\n+    </details> </p>\r\n+\r\n+【python 设置代码自动补充冒号和()】\r\n+  <details><summary>代码段</summary>\r\n+  <p>\r\n+  \r\n+  ```\r\n+  \"python.analysis.completeFunctionParens\": true,\r\n+  \"python.autoComplete.addBrackets\": true,\r\n+  ```\r\n+  </details> </p>\r\n+\r\n 【插件】\r\n - Material Icon Theme\r\n   图标主题；设置 👉 文件图标主题\r\n \r\n"
                },
                {
                    "date": 1653897657862,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -218,8 +218,10 @@\n     - `Code-runner:Save File Before Run`改为 `true`\r\n     - `Files: Auto Save Delay` 是更改自动保存的间隔时间，可以设置的久一点，减小拖垮时间；我设置为10分钟自动保存一次\r\n \r\n #TODO: 同步 vscode 设置（bilibili 视频）\r\n+\r\n+学习文档：\r\n 【markdown学习文档】\r\n   - *[参考](https://docs.github.com/cn/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax)\r\n \r\n 记录：\r\n"
                },
                {
                    "date": 1653897838905,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,13 @@\n-【运行】\r\n+\r\n+####使用\r\n+#####【运行】\r\n - [编辑器单步运行]python 编辑器单步运行按`F8`,或者右键 👉 在终端中运行指定的行\r\n - [运行完整文件]运行整个文件,可以在终端直接输入 `python 文件名.py` 或右键👉在终端中运行python文件；当文件所在位置指定不明的时候，要填写绝对路径`python f:/vs_learn/demo2/test_2.py`\r\n - [运行完整文件]当不设置断点的时候直接`F5`进入调试也等于直接运行文件进行输出\r\n \r\n \r\n-【调用上一级目录文件】\r\n+#####【调用上一级目录文件】\r\n - `.\\` 代表上一级目录  `python .\\hello_word.py`\r\n - 步骤\r\n    ```\r\n    # 导入库\r\n@@ -28,18 +30,18 @@\n       ```\r\n \r\n \r\n \r\n-【debug】\r\n+#####【debug】\r\n - `Ctrl+Shift+D` 打开 debug 窗口\r\n - `F5`进入调式界面，\r\n - `F9`设置断点\r\n - `F10`单步运行\r\n - `F11`进入函数来调试\r\n \r\n \r\n \r\n-【vscode 每个项目安装虚拟环境设置】\r\n+#####【vscode 每个项目安装虚拟环境设置】\r\n - 利用 anaconda 来设置，和平时用 anaconda 建立虚拟环境一样,此时是一整个环境，用conda管理环境包\r\n     - 【创建一个名字为 p350,版本为 python3.5.0的虚拟环境】`conda create --name p350 python=3.5.0`\r\n - 单独一个文件一个包，用pip管理环境包\r\n     - 环境要先安装两个包 `pip install virtualenv` `pip install virtualenvwrapper-win`\r\n@@ -59,20 +61,21 @@\n \r\n \r\n \r\n \r\n-【使用 jupyter】\r\n+#####【使用 jupyter】\r\n - 建立.ipynb 文件\r\n - 打开右侧有个[选择内核]\r\n - 选择好后每个框框左侧有个三角形，点击运行即可\r\n \r\n-【设置】\r\n+#####【设置】\r\n - `Ctrl+,`快捷打开\r\n - 用户设置是全局；当前工作空间是局部\r\n - 如果用户和工作空间设置了同样的项目，局部的会覆盖全局的设置\r\n \r\n \r\n-【自动化排版】\r\n+####美化\r\n+#####【自动化排版】\r\n - black 库 pip install black\r\n - 命令行中使用：black 文件名.py\r\n - 自动集成排版：设置 👉 搜 format on save👉 ✔\r\n   👉 搜 python format provider👉 选 black\r\n@@ -89,9 +92,9 @@\n       },\r\n     ```\r\n     </details> </p>\r\n \r\n-【python 设置代码自动补充冒号和()】\r\n+#####【python 设置代码自动补充冒号和()】\r\n   <details><summary>代码段</summary>\r\n   <p>\r\n   \r\n   ```\r\n@@ -99,13 +102,16 @@\n   \"python.autoComplete.addBrackets\": true,\r\n   ```\r\n   </details> </p>\r\n \r\n-【插件】\r\n-- Material Icon Theme\r\n+\r\n+\r\n+####插件\r\n+\r\n+#####【Material Icon Theme】\r\n   图标主题；设置 👉 文件图标主题\r\n \r\n-- autoDocstring\r\n+#####【autoDocstring】\r\n   注释；用三个\"\"\"调出，按 tab 去填写\r\n \r\n - Todo Tree\r\n   要用`#`开头\r\n"
                },
                {
                    "date": 1653897848646,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,12 +109,14 @@\n \r\n #####【Material Icon Theme】\r\n   图标主题；设置 👉 文件图标主题\r\n \r\n+\r\n #####【autoDocstring】\r\n   注释；用三个\"\"\"调出，按 tab 去填写\r\n \r\n-- Todo Tree\r\n+\r\n+#####【Todo Tree】\r\n   要用`#`开头\r\n   按照别人的方法设置了一下更新；采用下面这段代码，直接打开设置的 json 加进去 \\*[参考](https://blog.csdn.net/cc1998414/article/details/115408584)\r\n \r\n   <details><summary>代码段</summary>\r\n"
                },
                {
                    "date": 1653897872623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,15 +108,17 @@\n ####插件\r\n \r\n #####【Material Icon Theme】\r\n   图标主题；设置 👉 文件图标主题\r\n+  \r\n \r\n \r\n #####【autoDocstring】\r\n   注释；用三个\"\"\"调出，按 tab 去填写\r\n \r\n \r\n #####【Todo Tree】\r\n+\r\n   要用`#`开头\r\n   按照别人的方法设置了一下更新；采用下面这段代码，直接打开设置的 json 加进去 \\*[参考](https://blog.csdn.net/cc1998414/article/details/115408584)\r\n \r\n   <details><summary>代码段</summary>\r\n"
                },
                {
                    "date": 1653897971573,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,27 +92,22 @@\n       },\r\n     ```\r\n     </details> </p>\r\n \r\n-#####【python 设置代码自动补充冒号和()】\r\n-  <details><summary>代码段</summary>\r\n-  <p>\r\n-  \r\n+#####【python 设置代码自动补充冒号和()】  \r\n   ```\r\n   \"python.analysis.completeFunctionParens\": true,\r\n   \"python.autoComplete.addBrackets\": true,\r\n   ```\r\n-  </details> </p>\r\n \r\n \r\n-\r\n ####插件\r\n \r\n #####【Material Icon Theme】\r\n   图标主题；设置 👉 文件图标主题\r\n-  \r\n \r\n \r\n+\r\n #####【autoDocstring】\r\n   注释；用三个\"\"\"调出，按 tab 去填写\r\n \r\n \r\n"
                },
                {
                    "date": 1653898030974,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,9 +111,8 @@\n   注释；用三个\"\"\"调出，按 tab 去填写\r\n \r\n \r\n #####【Todo Tree】\r\n-\r\n   要用`#`开头\r\n   按照别人的方法设置了一下更新；采用下面这段代码，直接打开设置的 json 加进去 \\*[参考](https://blog.csdn.net/cc1998414/article/details/115408584)\r\n \r\n   <details><summary>代码段</summary>\r\n@@ -185,24 +184,24 @@\n     \"todo-tree.general.statusBar\": \"total\",\r\n   ```\r\n   </details> </p>\r\n \r\n-- Markdown Preview Enhanced\r\n+#####【Markdown Preview Enhanced】\r\n   一个 markdown 来画流程图、时序图\r\n \r\n ```sequence\r\n title:简单示例\r\n A->B:HELLO\r\n B-->A:WORLD\r\n ```\r\n \r\n-- Git Graph\r\n+#####【Git Graph】\r\n   源代码管理 👉 右侧出现一个 View Git Graph 点击 👉 可以看到每次存的版本 👉 点击可以看到更改文件更改的对比,且可以回溯版本\r\n \r\n-- IntelliCode\r\n+#####【IntelliCode】\r\n   语法代码提示\r\n \r\n-- indent-rainbow\r\n+#####【indent-rainbow】\r\n   彩虹缩进\r\n   正确语法会报错，改一个配置，打开设置，输入下面语法~~\r\n     <details><summary>代码段</summary>\r\n     <p>\r\n@@ -214,9 +213,9 @@\n         ],\r\n     ```\r\n     </details> </p>\r\n \r\n-- local history\r\n+#####【local history】\r\n   这个软件是保存更改的不同处，但需要自己“保存”了才能保存更改处（因只保存更改处，所以不会占用太大内存）\r\n   所以配合使用vscode的自动保存才能无缝衔接保存更改处，自动保存设置如下\r\n   - 在设置里搜索save\r\n     - 把`File:Auto Save`改为`afterDelay`\r\n@@ -224,10 +223,10 @@\n     - `Files: Auto Save Delay` 是更改自动保存的间隔时间，可以设置的久一点，减小拖垮时间；我设置为10分钟自动保存一次\r\n \r\n #TODO: 同步 vscode 设置（bilibili 视频）\r\n \r\n-学习文档：\r\n-【markdown学习文档】\r\n+####学习文档：\r\n+#####【markdown学习文档】\r\n   - *[参考](https://docs.github.com/cn/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax)\r\n \r\n-记录：\r\n+####记录：\r\n 1. JSON检测错误，让把`\"terminal.integrated.shell.windows\": \"C:\\\\Windows\\\\System32\\\\cmd.exe\",`改成`\"terminal.integrated.defaultProfiles.windows\": \"C:\\\\Windows\\\\System32\\\\cmd.exe\"；`我简单记录一下\n\\ No newline at end of file\n"
                },
                {
                    "date": 1653898306934,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,18 +29,16 @@\n       from bluelog import create_app  # NOQA: E402\r\n       ```\r\n \r\n \r\n-\r\n #####【debug】\r\n - `Ctrl+Shift+D` 打开 debug 窗口\r\n - `F5`进入调式界面，\r\n - `F9`设置断点\r\n - `F10`单步运行\r\n - `F11`进入函数来调试\r\n \r\n \r\n-\r\n #####【vscode 每个项目安装虚拟环境设置】\r\n - 利用 anaconda 来设置，和平时用 anaconda 建立虚拟环境一样,此时是一整个环境，用conda管理环境包\r\n     - 【创建一个名字为 p350,版本为 python3.5.0的虚拟环境】`conda create --name p350 python=3.5.0`\r\n - 单独一个文件一个包，用pip管理环境包\r\n@@ -57,17 +55,14 @@\n       上面--default-timeout=100是防止那个timeout报错的，后面用的镜像源。\r\n - 两种方法的区别是：①anaconda利用conda管理包，选择解释器的时候选择新建的环境即可，而后者利用pip管理包，在选择解释器时选择当前建立的虚拟环境后要把activate.bat拉入终端，进入虚拟环境以后前面会有(.venv)显示，前者没有；\r\n \r\n \r\n-\r\n-\r\n-\r\n-\r\n #####【使用 jupyter】\r\n - 建立.ipynb 文件\r\n - 打开右侧有个[选择内核]\r\n - 选择好后每个框框左侧有个三角形，点击运行即可\r\n \r\n+\r\n #####【设置】\r\n - `Ctrl+,`快捷打开\r\n - 用户设置是全局；当前工作空间是局部\r\n - 如果用户和工作空间设置了同样的项目，局部的会覆盖全局的设置\r\n@@ -92,118 +87,116 @@\n       },\r\n     ```\r\n     </details> </p>\r\n \r\n+\r\n #####【python 设置代码自动补充冒号和()】  \r\n   ```\r\n   \"python.analysis.completeFunctionParens\": true,\r\n   \"python.autoComplete.addBrackets\": true,\r\n   ```\r\n \r\n \r\n ####插件\r\n-\r\n #####【Material Icon Theme】\r\n-  图标主题；设置 👉 文件图标主题\r\n+  - 图标主题；设置 👉 文件图标主题\r\n \r\n \r\n-\r\n #####【autoDocstring】\r\n-  注释；用三个\"\"\"调出，按 tab 去填写\r\n+  - 注释；用三个\"\"\"调出，按 tab 去填写\r\n \r\n \r\n #####【Todo Tree】\r\n-  要用`#`开头\r\n-  按照别人的方法设置了一下更新；采用下面这段代码，直接打开设置的 json 加进去 \\*[参考](https://blog.csdn.net/cc1998414/article/details/115408584)\r\n+  - 要用`#`开头\r\n+  - 按照别人的方法设置了一下更新；采用下面这段代码，直接打开设置的 json 加进去 \\*[参考](https://blog.csdn.net/cc1998414/article/details/115408584)\r\n+    <details><summary>代码段</summary>\r\n+    <p>\r\n \r\n-  <details><summary>代码段</summary>\r\n-  <p>\r\n+    ```\r\n+      \"todo-tree.tree.showScanModeButton\": false,\r\n+      \"todo-tree.filtering.excludeGlobs\": [\"**/node_modules\", \"*.xml\", \"*.XML\"],\r\n+      \"todo-tree.filtering.ignoreGitSubmodules\": true,\r\n+      \"todohighlight.keywords\": [\r\n+      ],\r\n+      \"todo-tree.tree.showCountsInTree\": true,\r\n+      \"todohighlight.keywordsPattern\": \"TODO:|FIXME:|NOTE:|\\\\(([^)]+)\\\\)\",\r\n+      \"todohighlight.defaultStyle\": {\r\n \r\n-  ```\r\n-    \"todo-tree.tree.showScanModeButton\": false,\r\n-    \"todo-tree.filtering.excludeGlobs\": [\"**/node_modules\", \"*.xml\", \"*.XML\"],\r\n-    \"todo-tree.filtering.ignoreGitSubmodules\": true,\r\n-    \"todohighlight.keywords\": [\r\n-    ],\r\n-    \"todo-tree.tree.showCountsInTree\": true,\r\n-    \"todohighlight.keywordsPattern\": \"TODO:|FIXME:|NOTE:|\\\\(([^)]+)\\\\)\",\r\n-    \"todohighlight.defaultStyle\": {\r\n-\r\n-    },\r\n-    \"todohighlight.isEnable\": false,\r\n-    \"todo-tree.highlights.customHighlight\": {\r\n-      \"BUG\": {\r\n-        \"icon\": \"bug\",\r\n-        \"foreground\": \"#F56C6C\",\r\n-        \"type\": \"line\"\r\n       },\r\n-      \"FIXME\": {\r\n-        \"icon\": \"flame\",\r\n-        \"foreground\": \"#FF9800\",\r\n-        \"type\":\"line\"\r\n+      \"todohighlight.isEnable\": false,\r\n+      \"todo-tree.highlights.customHighlight\": {\r\n+        \"BUG\": {\r\n+          \"icon\": \"bug\",\r\n+          \"foreground\": \"#F56C6C\",\r\n+          \"type\": \"line\"\r\n+        },\r\n+        \"FIXME\": {\r\n+          \"icon\": \"flame\",\r\n+          \"foreground\": \"#FF9800\",\r\n+          \"type\":\"line\"\r\n+        },\r\n+        \"TODO\":{\r\n+          \"foreground\": \"#FFEB38\",\r\n+          \"type\":\"line\"\r\n+        },\r\n+        \"NOTE\":{\r\n+          \"icon\": \"note\",\r\n+          \"foreground\": \"#67C23A\",\r\n+          \"type\":\"line\"\r\n+        },\r\n+        \"INFO\":{\r\n+          \"icon\": \"info\",\r\n+          \"foreground\": \"#909399\",\r\n+          \"type\":\"line\"\r\n+        },\r\n+        \"TAG\":{\r\n+          \"icon\": \"tag\",\r\n+          \"foreground\": \"#409EFF\",\r\n+          \"type\":\"line\"\r\n+        },\r\n+        \"HACK\":{\r\n+          \"icon\": \"versions\",\r\n+          \"foreground\": \"#E040FB\",\r\n+          \"type\":\"line\"\r\n+        },\r\n+        \"XXX\":{\r\n+          \"icon\": \"unverified\",\r\n+          \"foreground\": \"#E91E63\",\r\n+          \"type\":\"line\"\r\n+        }\r\n       },\r\n-      \"TODO\":{\r\n-        \"foreground\": \"#FFEB38\",\r\n-        \"type\":\"line\"\r\n-      },\r\n-      \"NOTE\":{\r\n-        \"icon\": \"note\",\r\n-        \"foreground\": \"#67C23A\",\r\n-        \"type\":\"line\"\r\n-      },\r\n-      \"INFO\":{\r\n-        \"icon\": \"info\",\r\n-        \"foreground\": \"#909399\",\r\n-        \"type\":\"line\"\r\n-      },\r\n-      \"TAG\":{\r\n-        \"icon\": \"tag\",\r\n-        \"foreground\": \"#409EFF\",\r\n-        \"type\":\"line\"\r\n-      },\r\n-      \"HACK\":{\r\n-        \"icon\": \"versions\",\r\n-        \"foreground\": \"#E040FB\",\r\n-        \"type\":\"line\"\r\n-      },\r\n-      \"XXX\":{\r\n-        \"icon\": \"unverified\",\r\n-        \"foreground\": \"#E91E63\",\r\n-        \"type\":\"line\"\r\n-      }\r\n-    },\r\n-    \"todo-tree.general.tags\": [\r\n-      \"BUG\",\r\n-      \"HACK\",\r\n-      \"FIXME\",\r\n-      \"TODO\",\r\n-      \"INFO\",\r\n-      \"NOTE\",\r\n-      \"TAG\",\r\n-      \"XXX\"\r\n-    ],\r\n-    \"todo-tree.general.statusBar\": \"total\",\r\n-  ```\r\n-  </details> </p>\r\n+      \"todo-tree.general.tags\": [\r\n+        \"BUG\",\r\n+        \"HACK\",\r\n+        \"FIXME\",\r\n+        \"TODO\",\r\n+        \"INFO\",\r\n+        \"NOTE\",\r\n+        \"TAG\",\r\n+        \"XXX\"\r\n+      ],\r\n+      \"todo-tree.general.statusBar\": \"total\",\r\n+    ```\r\n+    </details> </p>\r\n \r\n #####【Markdown Preview Enhanced】\r\n-  一个 markdown 来画流程图、时序图\r\n+  - 一个 markdown 来画流程图、时序图\r\n \r\n-```sequence\r\n-title:简单示例\r\n-A->B:HELLO\r\n-B-->A:WORLD\r\n-```\r\n+    ```sequence\r\n+    title:简单示例\r\n+    A->B:HELLO\r\n+    B-->A:WORLD\r\n+    ```\r\n \r\n #####【Git Graph】\r\n-  源代码管理 👉 右侧出现一个 View Git Graph 点击 👉 可以看到每次存的版本 👉 点击可以看到更改文件更改的对比,且可以回溯版本\r\n+  - 源代码管理 👉 右侧出现一个 View Git Graph 点击 👉 可以看到每次存的版本 👉 点击可以看到更改文件更改的对比,且可以回溯版本\r\n \r\n #####【IntelliCode】\r\n-  语法代码提示\r\n+  - 语法代码提示\r\n \r\n #####【indent-rainbow】\r\n-  彩虹缩进\r\n-  正确语法会报错，改一个配置，打开设置，输入下面语法~~\r\n+  - 彩虹缩进\r\n+  - 正确语法会报错，改一个配置，打开设置，输入下面语法~~\r\n     <details><summary>代码段</summary>\r\n     <p>\r\n \r\n     ```\r\n@@ -211,22 +204,23 @@\n         \"indentRainbow.ignoreErrorLanguages\": [\r\n             \"python\"\r\n         ],\r\n     ```\r\n-    </details> </p>\r\n+  </details> </p>\r\n \r\n+\r\n #####【local history】\r\n-  这个软件是保存更改的不同处，但需要自己“保存”了才能保存更改处（因只保存更改处，所以不会占用太大内存）\r\n-  所以配合使用vscode的自动保存才能无缝衔接保存更改处，自动保存设置如下\r\n+  - 这个软件是保存更改的不同处，但需要自己“保存”了才能保存更改处（因只保存更改处，所以不会占用太大内存）\r\n+  - 所以配合使用vscode的自动保存才能无缝衔接保存更改处，自动保存设置如下\r\n   - 在设置里搜索save\r\n     - 把`File:Auto Save`改为`afterDelay`\r\n     - `Code-runner:Save File Before Run`改为 `true`\r\n     - `Files: Auto Save Delay` 是更改自动保存的间隔时间，可以设置的久一点，减小拖垮时间；我设置为10分钟自动保存一次\r\n \r\n #TODO: 同步 vscode 设置（bilibili 视频）\r\n \r\n ####学习文档：\r\n-#####【markdown学习文档】\r\n+##### - 【markdown学习文档】\r\n   - *[参考](https://docs.github.com/cn/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax)\r\n \r\n ####记录：\r\n 1. JSON检测错误，让把`\"terminal.integrated.shell.windows\": \"C:\\\\Windows\\\\System32\\\\cmd.exe\",`改成`\"terminal.integrated.defaultProfiles.windows\": \"C:\\\\Windows\\\\System32\\\\cmd.exe\"；`我简单记录一下\n\\ No newline at end of file\n"
                },
                {
                    "date": 1653901379349,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,8 +67,11 @@\n - 用户设置是全局；当前工作空间是局部\r\n - 如果用户和工作空间设置了同样的项目，局部的会覆盖全局的设置\r\n \r\n \r\n+#####【同步 vscode 设置】\r\n+\r\n+\r\n ####美化\r\n #####【自动化排版】\r\n - black 库 pip install black\r\n - 命令行中使用：black 文件名.py\r\n@@ -215,10 +218,10 @@\n     - 把`File:Auto Save`改为`afterDelay`\r\n     - `Code-runner:Save File Before Run`改为 `true`\r\n     - `Files: Auto Save Delay` 是更改自动保存的间隔时间，可以设置的久一点，减小拖垮时间；我设置为10分钟自动保存一次\r\n \r\n-#TODO: 同步 vscode 设置（bilibili 视频）\r\n \r\n+\r\n ####学习文档：\r\n ##### - 【markdown学习文档】\r\n   - *[参考](https://docs.github.com/cn/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax)\r\n \r\n"
                },
                {
                    "date": 1653901416095,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,8 +68,10 @@\n - 如果用户和工作空间设置了同样的项目，局部的会覆盖全局的设置\r\n \r\n \r\n #####【同步 vscode 设置】\r\n+- [参考1](https://blog.csdn.net/Yal_insist/article/details/122361113?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-5-122361113-blog-122908148.pc_relevant_paycolumn_v3&spm=1001.2101.3001.4242.4&utm_relevant_index=7)\r\n+- [参考2](https://blog.csdn.net/qq_39742704/article/details/122908148)\r\n \r\n \r\n ####美化\r\n #####【自动化排版】\r\n"
                },
                {
                    "date": 1653902034764,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -220,10 +220,17 @@\n     - 把`File:Auto Save`改为`afterDelay`\r\n     - `Code-runner:Save File Before Run`改为 `true`\r\n     - `Files: Auto Save Delay` 是更改自动保存的间隔时间，可以设置的久一点，减小拖垮时间；我设置为10分钟自动保存一次\r\n \r\n+####参考连接：\r\n+- [详尽的插件安装和修改](https://www.bilibili.com/video/BV1mA4y1Q7P5?spm_id_from=333.999.0.0)\r\n+- [anaconda环境变量配置+调用上级目录+代码调试](https://www.bilibili.com/video/BV1YL411L7Sg?spm_id_from=333.999.0.0)\r\n+- [项目虚拟环境配置1](https://www.bilibili.com/video/BV15h411S7vq?spm_id_from=333.999.0.0)\r\n+- [项目配置虚拟环境2](https://www.bilibili.com/video/BV1H7411U7LF?p=3)\r\n+- [代码调试+black配置](https://www.bilibili.com/video/BV1RF411e7Pe?spm_id_from=333.999.0.0)\r\n \r\n \r\n+\r\n ####学习文档：\r\n ##### - 【markdown学习文档】\r\n   - *[参考](https://docs.github.com/cn/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax)\r\n \r\n"
                },
                {
                    "date": 1653902069572,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -221,9 +221,9 @@\n     - `Code-runner:Save File Before Run`改为 `true`\r\n     - `Files: Auto Save Delay` 是更改自动保存的间隔时间，可以设置的久一点，减小拖垮时间；我设置为10分钟自动保存一次\r\n \r\n ####参考连接：\r\n-- [详尽的插件安装和修改](https://www.bilibili.com/video/BV1mA4y1Q7P5?spm_id_from=333.999.0.0)\r\n+- [详尽的插件安装和配置修改](https://www.bilibili.com/video/BV1mA4y1Q7P5?spm_id_from=333.999.0.0)\r\n - [anaconda环境变量配置+调用上级目录+代码调试](https://www.bilibili.com/video/BV1YL411L7Sg?spm_id_from=333.999.0.0)\r\n - [项目虚拟环境配置1](https://www.bilibili.com/video/BV15h411S7vq?spm_id_from=333.999.0.0)\r\n - [项目配置虚拟环境2](https://www.bilibili.com/video/BV1H7411U7LF?p=3)\r\n - [代码调试+black配置](https://www.bilibili.com/video/BV1RF411e7Pe?spm_id_from=333.999.0.0)\r\n"
                },
                {
                    "date": 1653902692016,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -226,8 +226,9 @@\n - [anaconda环境变量配置+调用上级目录+代码调试](https://www.bilibili.com/video/BV1YL411L7Sg?spm_id_from=333.999.0.0)\r\n - [项目虚拟环境配置1](https://www.bilibili.com/video/BV15h411S7vq?spm_id_from=333.999.0.0)\r\n - [项目配置虚拟环境2](https://www.bilibili.com/video/BV1H7411U7LF?p=3)\r\n - [代码调试+black配置](https://www.bilibili.com/video/BV1RF411e7Pe?spm_id_from=333.999.0.0)\r\n+- [github]\r\n \r\n \r\n \r\n ####学习文档：\r\n"
                },
                {
                    "date": 1653902818255,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,10 +98,11 @@\n   ```\r\n   \"python.analysis.completeFunctionParens\": true,\r\n   \"python.autoComplete.addBrackets\": true,\r\n   ```\r\n+#####【ctrl+,】打开设置👉搜索zoom👉打勾\r\n+  实现✔按住ctrl+滚轮对字体大小进行缩放\r\n \r\n-\r\n ####插件\r\n #####【Material Icon Theme】\r\n   - 图标主题；设置 👉 文件图标主题\r\n \r\n"
                },
                {
                    "date": 1653902894702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,9 +98,11 @@\n   ```\r\n   \"python.analysis.completeFunctionParens\": true,\r\n   \"python.autoComplete.addBrackets\": true,\r\n   ```\r\n+\r\n #####【ctrl+,】打开设置👉搜索zoom👉打勾\r\n+\r\n   实现✔按住ctrl+滚轮对字体大小进行缩放\r\n \r\n ####插件\r\n #####【Material Icon Theme】\r\n"
                }
            ],
            "date": 1653894494622,
            "name": "Commit-0",
            "content": "【运行】\r\n- [编辑器单步运行]python 编辑器单步运行按`F8`,或者右键 👉 在终端中运行指定的行\r\n- [运行完整文件]运行整个文件,可以在终端直接输入 `python 文件名.py` 或右键👉在终端中运行python文件；当文件所在位置指定不明的时候，要填写绝对路径`python f:/vs_learn/demo2/test_2.py`\r\n- [运行完整文件]当不设置断点的时候直接`F5`进入调试也等于直接运行文件进行输出\r\n\r\n【调用上一级目录文件】\r\n- `.\\` 代表上一级目录  `python .\\hello_word.py`\r\n- 步骤\r\n   ```\r\n   # 导入库\r\n   import sys\r\n   # 把当前.py文件存在的文件夹的上一级文件夹添加到路径搜索系统里去\r\n    sys.path.append(\"./\")\r\n   # 然后才能把上一级.py文件当成模块，导入模块里的函数\r\n   from demo1 import test_1 #导入模块中的文件\r\n   test_1.print_hello() #导入文件中的函数\r\n  ```\r\n- 可能出现的问题：导入模块在导入库前 \r\n    - 一般是autoppep8设置保存自动格式化后，会将下面的import放入页面底部的问题（我用的black，目前无问题）\r\n    - 解决方案*[参考](https://blog.csdn.net/qq_16829085/article/details/107214948?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~aggregatepage~first_rank_ecpm_v1~rank_v31_ecpm-1-107214948-null-null.pc_agg_new_rank&utm_term=pep8%E8%AE%BE%E7%BD%AEimport%E9%A1%BA%E5%BA%8F+vscode&spm=1000.2123.3001.4430)：\r\n    1. 打开 VSCode的设置，添加下面的语句，让 autopep8 忽略 E402，也就是 “模块级别导入不在文件顶部”错误。\r\n      `\"python.formatting.autopep8Args\": [\"--ignore\", \"E402\"]`\r\n    2. 在需要固定位置的 import 语句后面加上 `# NOQA: E402` 注释\r\n      ```\r\n      import os\r\n      from bluelog import create_app  # NOQA: E402\r\n      ```\r\n\r\n\r\n\r\n【debug】\r\n- `Ctrl+Shift+D` 打开 debug 窗口\r\n- `F5`进入调式界面，\r\n- `F9`设置断点\r\n- `F10`单步运行\r\n- `F11`进入函数来调试\r\n\r\n【自动化排版】\r\n- black 库 pip install black\r\n- 命令行中使用：black 文件名.py\r\n- 自动集成排版：设置 👉 搜 format on save👉 ✔\r\n  👉 搜 python format provider👉 选 black\r\n  【自动化排版不排版 markdown】#todo\r\n- 设置中加入局部过滤：\r\n    <details><summary>代码段</summary>\r\n    <p>\r\n\r\n    ```\r\n    \"[markdown]\": {\r\n        \"editor.wordWrap\": \"on\",\r\n        \"editor.quickSuggestions\": false,\r\n        \"editor.formatOnSave\": false\r\n      },\r\n    ```\r\n    </details> </p>\r\n\r\n【python 设置代码自动补充冒号和()】\r\n  <details><summary>代码段</summary>\r\n  <p>\r\n  \r\n  ```\r\n  \"python.analysis.completeFunctionParens\": true,\r\n  \"python.autoComplete.addBrackets\": true,\r\n  ```\r\n  </details> </p>\r\n\r\n【vscode 每个项目安装虚拟环境设置】\r\n- 利用 anaconda 来设置，和平时用 anaconda 建立虚拟环境一样,此时是一整个环境，用conda管理环境包\r\n- 单独一个文件一个包，用pip管理环境包\r\n    - 环境要先安装两个包 `pip install virtualenv` `pip install virtualenvwrapper-win`\r\n    - `python -m venv .venv`       .venv是虚拟环境名字\r\n    - 进入虚拟环境：把.venv的Script的activate.bat拉到cmd编辑框，前头显示出((.venv)即为进入到虚拟环境\r\n    - 在当前虚拟环境里下载包  `pip install pandas` 不能用conda，否则会直接安装到anaconda的base\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n【使用 jupyter】\r\n- 建立.ipynb 文件\r\n- 打开右侧有个[选择内核]\r\n- 选择好后每个框框左侧有个三角形，点击运行即可\r\n\r\n【设置】\r\n- `Ctrl+,`快捷打开\r\n- 用户设置是全局；当前工作空间是局部\r\n- 如果用户和工作空间设置了同样的项目，局部的会覆盖全局的设置\r\n\r\n【插件】\r\n- Material Icon Theme\r\n  图标主题；设置 👉 文件图标主题\r\n\r\n- autoDocstring\r\n  注释；用三个\"\"\"调出，按 tab 去填写\r\n\r\n- Todo Tree\r\n  要用`#`开头\r\n  按照别人的方法设置了一下更新；采用下面这段代码，直接打开设置的 json 加进去 \\*[参考](https://blog.csdn.net/cc1998414/article/details/115408584)\r\n\r\n  <details><summary>代码段</summary>\r\n  <p>\r\n\r\n  ```\r\n    \"todo-tree.tree.showScanModeButton\": false,\r\n    \"todo-tree.filtering.excludeGlobs\": [\"**/node_modules\", \"*.xml\", \"*.XML\"],\r\n    \"todo-tree.filtering.ignoreGitSubmodules\": true,\r\n    \"todohighlight.keywords\": [\r\n    ],\r\n    \"todo-tree.tree.showCountsInTree\": true,\r\n    \"todohighlight.keywordsPattern\": \"TODO:|FIXME:|NOTE:|\\\\(([^)]+)\\\\)\",\r\n    \"todohighlight.defaultStyle\": {\r\n\r\n    },\r\n    \"todohighlight.isEnable\": false,\r\n    \"todo-tree.highlights.customHighlight\": {\r\n      \"BUG\": {\r\n        \"icon\": \"bug\",\r\n        \"foreground\": \"#F56C6C\",\r\n        \"type\": \"line\"\r\n      },\r\n      \"FIXME\": {\r\n        \"icon\": \"flame\",\r\n        \"foreground\": \"#FF9800\",\r\n        \"type\":\"line\"\r\n      },\r\n      \"TODO\":{\r\n        \"foreground\": \"#FFEB38\",\r\n        \"type\":\"line\"\r\n      },\r\n      \"NOTE\":{\r\n        \"icon\": \"note\",\r\n        \"foreground\": \"#67C23A\",\r\n        \"type\":\"line\"\r\n      },\r\n      \"INFO\":{\r\n        \"icon\": \"info\",\r\n        \"foreground\": \"#909399\",\r\n        \"type\":\"line\"\r\n      },\r\n      \"TAG\":{\r\n        \"icon\": \"tag\",\r\n        \"foreground\": \"#409EFF\",\r\n        \"type\":\"line\"\r\n      },\r\n      \"HACK\":{\r\n        \"icon\": \"versions\",\r\n        \"foreground\": \"#E040FB\",\r\n        \"type\":\"line\"\r\n      },\r\n      \"XXX\":{\r\n        \"icon\": \"unverified\",\r\n        \"foreground\": \"#E91E63\",\r\n        \"type\":\"line\"\r\n      }\r\n    },\r\n    \"todo-tree.general.tags\": [\r\n      \"BUG\",\r\n      \"HACK\",\r\n      \"FIXME\",\r\n      \"TODO\",\r\n      \"INFO\",\r\n      \"NOTE\",\r\n      \"TAG\",\r\n      \"XXX\"\r\n    ],\r\n    \"todo-tree.general.statusBar\": \"total\",\r\n  ```\r\n  </details> </p>\r\n\r\n- Markdown Preview Enhanced\r\n  一个 markdown 来画流程图、时序图\r\n\r\n```sequence\r\ntitle:简单示例\r\nA->B:HELLO\r\nB-->A:WORLD\r\n```\r\n\r\n- Git Graph\r\n  源代码管理 👉 右侧出现一个 View Git Graph 点击 👉 可以看到每次存的版本 👉 点击可以看到更改文件更改的对比,且可以回溯版本\r\n\r\n- IntelliCode\r\n  语法代码提示\r\n\r\n- indent-rainbow\r\n  彩虹缩进\r\n  正确语法会报错，改一个配置，打开设置，输入下面语法~~\r\n    <details><summary>代码段</summary>\r\n    <p>\r\n\r\n    ```\r\n        \"todo-tree.general.statusBar\": \"total\",\r\n        \"indentRainbow.ignoreErrorLanguages\": [\r\n            \"python\"\r\n        ],\r\n    ```\r\n    </details> </p>\r\n- local history\r\n\r\n\r\n#TODO：回溯历史版本\r\n#TODO: 同步 vscode 设置（bilibili 视频）\r\n【markdown学习文档】\r\n  - *[参考](https://docs.github.com/cn/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax)\r\n"
        }
    ]
}